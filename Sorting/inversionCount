#program for inversionCount

class Solution:
    def merge(self,arr,l,m,r):
        cnt=0
        n1=m-l+1
        n2=r-m
        left=[]
        right=[]
        
        for i in range(0,n1):
            left.append(arr[l+i])
        for i in range(0,n2):
            right.append(arr[m+1+i])
        k=l
        i=0
        j=0
        
        while i<n1 and j<n2:
            if left[i]<=right[j]:
                arr[k]=left[i]
                i+=1
            else:
            #only this will be added
                cnt+=n1-i
                arr[k]=right[j]
                j+=1
            k+=1
        while i<n1:
            arr[k]=left[i]
            i+=1
            k+=1
            
        while j<n2:
            arr[k]=right[j]
            j+=1
            k+=1   
        return cnt
        
        
    def mergeSort(self,arr,l,r):
        cnt=0
        if l<r:
            m=l+(r-l)//2
            cnt+=self.mergeSort(arr,l,m)
            cnt+=self.mergeSort(arr,m+1,r)
            cnt+=self.merge(arr,l,m,r)
        return cnt
   
    def inversionCount(self, arr, n):
        ans= self.mergeSort(arr,0,n-1)
        return ans
